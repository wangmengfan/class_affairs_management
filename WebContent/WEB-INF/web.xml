<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>class_affairs_management</display-name>
  <!-- 应用的部署路径 -->
  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value> ClassAffairsManagement </param-value>
  </context-param>
  <!-- 扫描加载spring配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/applicationContext.xml</param-value>
	</context-param>
	<!-- 加载log4j配置文件 -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<!-- log4j的刷新频率 开一条watchdog线程每6秒扫描一下配置文件的变化;  -->
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>60000</param-value>
	</context-param>
	
	<!-- 动态的改变记录级别和策略，不需要重启Web应用 -->
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  
  <!--Spring的ApplicationContext载入。ContextLoaderListener监听器的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 使Spring支持request与session的scope,如:<bean id="loginAction" class="com.foo.LoginAction" scope="request"/> -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	<!-- 疑问:在介绍webApplicationContext初始化时，我们已经通过ContextLoaderListener将web容器与
		spring容器整合，为什么这里又要引入一个额外的RequestContextListener以支持Bean的另外3个作用域呢?
		在整合spring容器时使用ContextLoaderListener，它实现了ServletContextListener监听器接口，
		ServletContextListener只负责监听web容器启动和关闭的事件。
		而RequestContextListener实现ServletRequestListener监听器接口，该监听器监听HTTP请求事件，web服务器
		接收的每一次请求都会通知该监听器。
		spring容器启动和关闭操作由web容器的启动和关闭事件触发，但如果spring容器中的Bean需要request,session,globalsession
		作用域的支持，spring容器本身就必须获得web容器的HTTP请求事件，以HTTP请求的事件驱动Bean作用域的控制逻辑 -->
  <!-- Spring 刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	  <!--系统自定义参数初始化环境存放 -->
  <listener>
    <listener-class>com.classaffairs.framework.core.init.WebContextListener</listener-class>
  </listener>
  
  <listener>
		<listener-class>com.classaffairs.common.LoadInfoListener</listener-class>
	</listener>
  
  <!-- 安全，认证 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 获取HttpServletRequest，HttpServletSession等 -->
	<filter>
		<filter-name>GetContent</filter-name>
		<filter-class>com.classaffairs.service.impl.oplog.GetContent</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>GetContent</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  	<!-- servlet 定义 -->
	<servlet>
		<servlet-name>CXFServlet</servlet-name>
		<servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>CXFServlet</servlet-name>
		<url-pattern>/cxf/*</url-pattern>
	</servlet-mapping>
  <!-- DispatcherServlet是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点，
  	      而且负责职责的分派，而且与Spring IoC容器无缝集成，从而可以获得Spring的所有好处 -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <description>SpringMvc配置文件</description>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/classes/spring/springmvc-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>*.action</url-pattern>
  </servlet-mapping>
  
  <!-- 文件上传 servlet -->
	<servlet>
		<servlet-name>UploadServlet</servlet-name>
		<servlet-class>com.classaffairs.servlet.UploadServlet</servlet-class>
		<init-param>
			<param-name>path</param-name>
			<param-value>upload/</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>UploadServlet</servlet-name>
		<url-pattern>/uploadServlet</url-pattern>
	</servlet-mapping>
  
  
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>/home/login/login.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app>