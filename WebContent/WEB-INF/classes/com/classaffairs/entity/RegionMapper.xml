<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.classaffairs.entity.Region" >
  <resultMap id="RegionResultMap" type="com.classaffairs.entity.Region" >
    <id column="region_id" property="regionId" jdbcType="BIGINT" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="english_name" property="englishName" jdbcType="VARCHAR" />
    <result column="parent_region_id" property="parentRegionId" jdbcType="BIGINT" />
    <result column="state" property="state" jdbcType="INTEGER" />
  </resultMap>
  <select id="findAll" resultType="com.classaffairs.entity.Region">
    select * from region
  </select>

  <sql id="Base_Column_List" >
    region_id, type, code, `name`, english_name, parent_region_id, `state`
  </sql>
  <insert id="insert" parameterType="com.classaffairs.entity.Region" >
    insert into region
    <trim prefix="(" suffix=")" suffixOverrides="," >
      region_id,
      type,
      code,
      `name`,
      english_name,
      parent_region_id,
      `state`,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{regionId,jdbcType=BIGINT},
      #{type,jdbcType=INTEGER},
      #{code,jdbcType=VARCHAR},
      #{name,jdbcType=VARCHAR},
      #{englishName,jdbcType=VARCHAR},
      #{parentRegionId,jdbcType=BIGINT},
      #{state,jdbcType=INTEGER},
    </trim>
  </insert>
  <update id="update" parameterType="com.classaffairs.entity.Region" >
    update region
    <set >
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="englishName != null" >
        english_name = #{englishName,jdbcType=VARCHAR},
      </if>
      <if test="parentRegionId != null" >
        parent_region_id = #{parentRegionId,jdbcType=BIGINT},
      </if>
      <if test="state != null" >
        `state` = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where region_id = #{regionId,jdbcType=BIGINT}
  </update>
  <!--  根据region_id获取区域对象    -->
    <select id="findById" parameterType="Long" resultMap="RegionResultMap">
		select * from region where region_id=#{region_id}
	</select> 
  
  	<!--  根据区域类型获取区域对象    -->
	<select id="getByType" parameterType="Integer" resultMap="RegionResultMap">
		select * from region where type=#{type} order by code asc
	</select>
  
	<!--  根据parentRegionId获取区域对象    -->
	<select id="getByParentRegionId" parameterType="Long" resultMap="RegionResultMap">
		select * from region where parent_region_id=#{parentRegionId} order by code asc
	</select>
	
	<select id="getByParentName" parameterType="String" resultMap="RegionResultMap">
		select * from region where parent_region_id in(select region_id from region where name like #{parentName})
		order by code asc
		
	</select>
	
	
    <!--  根据parentRegionId和state（启用状态）获取子区域对象    -->
    <select id="getByParentRegionIdAndState" parameterType="java.util.HashMap" resultMap="RegionResultMap">
		select * from region where parent_region_id=#{region_id}
		<if test="state!=null">
			and state=#{state} 
		</if>
		order by code asc
	</select>
	
	<!-- <delete id="delete" parameterType="Long">
		delete from region where region_id=#{region_id}
	</delete> -->

	<update id="updateRegionState" parameterType="java.util.HashMap">
		update region set state=#{state}  where region_id=#{region_id} order by code asc
	</update>
	
	<update id="updateAllRegionState" >
		update region set state=#{state} 
	</update>
	
	<select id="getByTypeAndState" parameterType="java.util.HashMap" resultMap="RegionResultMap">
		select * from region where type=#{type} and state=#{state} order by code asc
	</select>
	<select id="getRegionByName" parameterType="java.util.HashMap" resultType="String">
	     select  region_id from region where
	     <if test="urbanName!=null and cityName!=null">
	      name like #{urbanName}
		     <if test="cityName != null">
		     	and parent_region_id in(select id from region where name like #{cityName})
		     </if>
	     </if>
	     <if test="urbanName==null">
	     name like #{cityName}
	     </if>
	     order by code asc
	</select>
	<select id="getAllRootRegion" parameterType="java.util.HashMap" resultMap="RegionResultMap">
        select * from region where region.parent_region_id='0' 
		<if test="state!=null">
			and state=#{state} 
		</if>
    </select>
    <select id="getRegionByCode" parameterType="String" resultMap="RegionResultMap">
        select * from region where code=#{code} 		
    </select>
</mapper>