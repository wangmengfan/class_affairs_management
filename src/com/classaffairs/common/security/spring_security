先整理下spring secruity验证流程：

	springSecurity的登录验证是由org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter这个过滤器来完成的,
在该类的父类AbstractAuthenticationProcessingFilter中有一个AuthenticationManager接口属性,验证工作主要是通过这个AuthenticationManager接口的实例来完成的。
在默认情况下，springSecurity框架会把org.springframework.security.authentication.ProviderManager类的实例注入到该属性.

	UsernamePasswordAuthenticationFilter的验证过程如下：
		1. 首先过滤器会调用自身的attemptAuthentication方法，从request中取出authentication, 
	authentication是在org.springframework.security.web.context.SecurityContextPersistenceFilter过滤器中通过捕获用户提交的登录表单中的内容生成的一个org.springframework.security.core.Authentication接口实例.
		2. 拿到authentication对象后，过滤器会调用ProviderManager类的authenticate方法，并传入该对象.
		3.ProviderManager类的authenticate方法中会调用类中的List<AuthenticationProvider> providers集合中的各个AuthenticationProvider接口实现类中的authenticate(Authentication authentication)方法进行验证，由此可见，
	真正的验证逻辑是由各个AuthenticationProvider接口实现类来完成的。DaoAuthenticationProvider类是默认情况下注入的一个AuthenticationProvider接口实现类.
		4.provider的实现类在验证用户时，会调用userDetailsService的实现类的loadUserByUsername方法来获取用户信息，
